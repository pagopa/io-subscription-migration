name: templates_client_sdk_publish_template

inputs:
  openapiSpecPath:
    required: false
    type: string
  apiProjectDir:
    required: false
    default: "."
    type: string
  sdkPackageName:
    required: false
    default: ''
    type: string
  generatorPackageName:
    required: false
    default: "@pagopa/openapi-codegen-ts"
    type: string
  npmRegistry:
    required: false
    default: https://registry.npmjs.org/
    type: string
  artifactName:
    required: false
    default: Bundle_SDK
    type: string

runs:
  using: composite

  steps:

  - name: Setup conditional variables
    id: setvarStep
    run: |-
      # Set SDK package name, if needed
      [ "${{inputs.sdkPackageName}}" == "" ] && PKG_NAME_PARAM='' || PKG_NAME_PARAM='--package-name ${{ inputs.sdkPackageName }}'
      echo "setting codegenPackageNameParameter=$PKG_NAME_PARAM"
      echo "##vso[task.setvariable variable=codegenPackageNameParameter;]$PKG_NAME_PARAM"

      #Set generated code base directory
      echo "setting generatedCodeDir=${{ runner.temp }}/generated_${{ inputs.artifactName }}"
      echo "##vso[task.setvariable variable=generatedCodeDir;]${{ runner.temp }}/generated_${{ inputs.artifactName }}"

    shell: bash

  - name: Generate client and definitions
    run: |-
      set -euo pipefail
      PACKAGE=${{ inputs.generatorPackageName }}

      # If the application use a specific version of the generator package, use it; otherwise, just use latest version from the registry
      # Warning: yarn only is supported
      CODEGEN_VERSION=$(yarn list --depth=0 | grep $PACKAGE |  grep -Eo "([0-9]+\.)+[0-9]+" || echo '*')

      # Execute the generator fetching the specific package from the registry
      npx -p $PACKAGE@$CODEGEN_VERSION gen-api-sdk --api-spec ${{ inputs.openapiSpecPath }} \
        --out-dir ${{ env.generatedCodeDir }} ${{ env.codegenPackageNameParameter }} --request-types --response-decoders --client
    
    shell: bash
    working-directory: "${{ inputs.apiProjectDir }}"

  - name: Install dependencies
    run: yarn install
    working-directory: "${{ env.generatedCodeDir }}"
    shell: bash

  - name: Build dependencies
    run: yarn build
    working-directory: "${{ env.generatedCodeDir }}"
    shell: bash

  - uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
    with:
      name: "${{ inputs.artifactName }}"
      path: "${{ env.generatedCodeDir }}"

  - name: TEST
    shell: bash
    run: |
      pwd
      echo ""
      ls -la .
      echo ""
      echo "${{ env.generatedCodeDir }}"
      echo ""
      ls -la ${{ env.generatedCodeDir }}

  # - run: npm publish --access public --registry ${{ inputs.npmRegistry }}
  #   working-directory: " ${{ env.generatedCodeDir }}"
  #   shell: bash